// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package pass

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type PassDatarec struct {
	Packets uint64
	Bytes   uint64
}

// LoadPass returns the embedded CollectionSpec for Pass.
func LoadPass() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PassBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Pass: %w", err)
	}

	return spec, err
}

// LoadPassObjects loads Pass and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*PassObjects
//	*PassPrograms
//	*PassMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadPassObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadPass()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// PassSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PassSpecs struct {
	PassProgramSpecs
	PassMapSpecs
	PassVariableSpecs
}

// PassProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PassProgramSpecs struct {
	Pass *ebpf.ProgramSpec `ebpf:"pass"`
}

// PassMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PassMapSpecs struct {
	XdpStatsMap *ebpf.MapSpec `ebpf:"xdp_stats_map"`
}

// PassVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PassVariableSpecs struct {
}

// PassObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadPassObjects or ebpf.CollectionSpec.LoadAndAssign.
type PassObjects struct {
	PassPrograms
	PassMaps
	PassVariables
}

func (o *PassObjects) Close() error {
	return _PassClose(
		&o.PassPrograms,
		&o.PassMaps,
	)
}

// PassMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadPassObjects or ebpf.CollectionSpec.LoadAndAssign.
type PassMaps struct {
	XdpStatsMap *ebpf.Map `ebpf:"xdp_stats_map"`
}

func (m *PassMaps) Close() error {
	return _PassClose(
		m.XdpStatsMap,
	)
}

// PassVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadPassObjects or ebpf.CollectionSpec.LoadAndAssign.
type PassVariables struct {
}

// PassPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadPassObjects or ebpf.CollectionSpec.LoadAndAssign.
type PassPrograms struct {
	Pass *ebpf.Program `ebpf:"pass"`
}

func (p *PassPrograms) Close() error {
	return _PassClose(
		p.Pass,
	)
}

func _PassClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed pass_bpfeb.o
var _PassBytes []byte
